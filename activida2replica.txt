1. Requerimientos no funcionales.
El proyecto elaborado requiere tener acceso a la base de datos con el nombre de Evento Deportivo las 24 horas los 7 días de la semana, con el fin de garantizar dicho acceso y disponibilidad completa se tendrán en cuenta los siguientes requerimientos:
? Como requerimiento principal es mantener el funcionamiento permanente de la base de datos Evento Deportivo y sus colecciones.
? Se debe replicar la base de datos, en ella deben contener tres nodos, los cuales representaran a tres servidores con el almacenamiento de la misma información.
? Cada uno de los servidores o nodos debe manejar los permisos necesarios para acceder a la información de la base de datos y replicarla.
? Cada servidor o nodo se caracterizará por un nombre, para este proyecto serán:
• “DESKTOP-KEHD2QP:20000”
• “DESKTOP-KEHD2QP:20001”
• “DESKTOP-KEHD2QP:20002”
? En caso de que el servidor o nodo maestro no se pueda acceder el sistema nos permitirá que algún nodo secundario nos de acceso a la información si generar trauma alguno.
? El sistema debe garantizar que el ingreso, la consulta o la modificación de información se realice son contratiempos y de la forma más ágil posible.
2. Replicación de la base de datos Evento Deportivo.
La replicación de la base de datos Evento Deportivo está configurada en cada instancia de mongoDB así:
Nodo Primario
? Acepta las solicitudes de operaciones de escritura del cliente.
? Acepta las solicitudes de operaciones de lectura del cliente.
? Solo existirá un maestro en el conjunto de réplica.
? Si el nodo maestro sufre una falla, el conjunto que replico elige uno de los nodos secundarios para que tome la posición de nodo maestro.
Nodos Segundarios
? Replica los datos obtenidos en el nodo maestro o primario.
? Se actualiza asincrónicamente.
? Se puede configurar para que solo acepte solicitudes de lectura y denegando las solicitudes de escritura.
Diagrama de replicación:
2.1. Scripts.
> EventoVoleibolReplicaset=new ReplSetTest({name:"Torneo",nodes:3})
Este comando nos permitirá crear un conjunto de 3 réplicas.
El Sistema nos crea tres puertos.
> EventoFutbolReplicaset=new ReplSetTest({name:"Torneo",nodes:3})
Con este comando inicializamos las réplicas.
Node #1:
Node # 2:
Node # 3:
Conexiones:
> EventoVoleibolReplicaset.initiate()
Este comando nos permite iniciar con la replicación de los datos.
> conn=new Mongo("DESKTOP-KEHD2QP:20000")
Este comando nos permite conectar al nodo #1 puerto 20000
> testDB=conn.getDB("eventoDeportivo")
Nos conectamos con la base de datos EVENTO DEPORTIVO
> testDB.isMaster()
Le preguntamos al nodo #1 o puerto 20000 si es el nodo principal o maestro, la respuesta es verdadero.
> use eventoDeportivo; - > show collections;
Utilizamos la base de datos EVENTO DEPORTIVO y consultamos sus colecciones.
> testDB.Deportistas.insert({})
Con este comando ingresamos datos a la colección DEPORTISTAS en la base de datos EVENTO DEPORTIVO, lo estamos aplicando en el nodo principal.
> testDB.Deportistas.count();
> testDB.Deportistas.find().pretty();
Con estos comandos nos permites verificar la cantidad de información y que información insertamos en la colección que se encuentra en el nodo principal.
> connSecondary=new Mongo("DESKTOP-KEHD2QP:20001")
Nos conectamos al nodo #2 con el fin para verificar que la información que insertamos en el nodo primario esta replicando en los demás nodos.
> secondaryTestDB=connSecondary.getDB("eventoDeportivo")
Nos conectamos a la base de datos EVENTO DEPORTIVO
> secondaryTestDB.isMaster()
Preguntamos al nodo si es el principal, la respuesta es FALSO
> secondaryTestDB.Deportistas.count()
> secondaryTestDB.Deportistas.find().pretty()
Con estos comandos verificamos que la información que ingresamos en el nodo principal se encuentra replicada en el nodo #2.
> connSecondary=new Mongo("DESKTOP-KEHD2QP:20002")
Nos conectamos al nodo #3 para verifica si se está replicando la información ingresada a la colección DEPORTITAS.
> secondaryTestDB.Deportistas.count()
> secondaryTestDB.Deportistas.find().pretty()
Con estos comandos verificamos que la información que ingresamos en el nodo principal se encuentra replicada en el nodo #3
> secondaryTestDB.isMaster()
Preguntamos al nodo si es el principal, la respuesta es FALSO
> connPrimary=new Mongo("DESKTOP-KEHD2QP:20000")
Nos conectamos al nodo #1 para proceder a detenerlo, esto con el fin de realizar una simulación de fallo, con el fin de comprobar que los demás nodos quedan funcionales.
> testDB.isMaster()
Le preguntamos al nodo #1 o puerto 20000 si es el nodo principal o maestro, la respuesta es verdadero.
> primaryDB.admin.Command({shutdown:1});
Con el comando detenemos el funcionamiento del nodo #1 puerto 20000.
> connNewPrimary=new Mongo("DESKTOP-KEHD2QP:20001")
Nos conectamos a un nuevo nodo primario, en este caso es el nodo #2 o puerto 20001.
> newPrimaryDB.isMaster()
Consultamos si el nuevo nodo primario, el nodo #2 es el principal o maestro, la respuesta es VERDADERO.
> EventoVoleibolReplicaSet.stopSet()
Con el comando detenemos la replicación de la base de datos EVENTO DEPORTIVO.
3. Casos de Prueba. Id Caso de Prueba Descripción Fecha Resultado Esperado 0001 Replicación. Verificar que el nodo primario y secundarios se hayan creado. 31/03/2003
Verificar los nodos primarios y secundarios se encuentren creados. 0002 Accesibilidad. Ingresa documentos a las colecciones. 31/03/2003
Encontrar documentos en las colecciones existentes. 0003 Duplicidad. Validar con prueba de desconexión del nodo primario y la promoción de alguno de los nodos secundarios a primario 31/03/2003
Al simular la caída del nodo primario uno de los nodos secundarios tome dicho rol. 0004 Validación. Verificación de cuál de los nodos secundarios es el primario 31/03/2003
Verificar que la información se accesible para lectura y escritura por parte del cliente. 0005 Open Close. Permite abrir y cerrar una base de datos. 31/03/2003
Visualizar que el sistema inicia y finalice la replicación de una base de datos.
4. Ejecución de casos de prueba.
Ejecución caso de prueba # 0001.
Verificar los nodos primarios y secundarios se encuentren creados.
Node #1:
Node # 2:
Node # 3:
Ejecución caso de prueba # 0002
Encontrar documentos en las colecciones existentes.
Ejecución caso de prueba # 0003
Al simular la caída del nodo primario uno de los nodos secundarios tome dicho rol. Detenemos el funcionamiento del nodo #1 puerto 20000.
Nos conectamos a un nuevo nodo primario, en este caso es el nodo #2 o puerto 20001.
Ejecución caso de prueba # 0004
Verificar que la información se accesible para lectura y escritura por parte del cliente. Al tener fallas en el nodo primario el sistema nos permite tener acceso al siguiente nodo que toma el roll de master, en este caso, el nodo #2 es el principal o maestro, al consultar si es master la respuesta es VERDADERO.
Ejecución caso de prueba # 0005
Visualizar que el sistema inicia y finalice la replicación de una base de datos. Inicializamos la replica de la base de datos EVENTO DEPORTIVO.
Detenemos la replicación de la base de datos EVENTO DEPORTIVO